!<arch>
0-isupper.c/    0           0     0     644     267       `
#include "main.h"

/**
 * _isupper - checks if parameter is an uppercase character
 * @c: input character
 *
 * Return: 1 if is an uppercase character, 0 in other case
 */
int _isupper(int c)
{
	if (c >= 65 && c <= 90)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

0-memset.c/     0           0     0     644     312       `
/**
 * _memset - fills memory with a constant byte
 * @s: A char pointer
 * @b: The byte to be used to fill s
 * @n: The size of memory area of s to be filled
 *
 * Return: Pointer
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i = 0;

	while (i < n)
	{
		s[i] = b;
		i++;
	}

	return (s);
}
0-strcat.c/     0           0     0     644     349       `
/**
 * _strcat - concatenates two strings
 * @src: The first part o the string
 * @dest: The second part of the string
 *
 * Return: dest pointer
 */
char *_strcat(char *dest, char *src)
{
	int i, j;

	i = 0;
	while (dest[i] != '\0')
		i++;

	j = 0;
	while (src[j] != '\0')
	{
		dest[i] = src[j];
		j++;
		i++;
	}
	dest[i] = '\0';
	return (dest);
}

100-atoi.c/     0           0     0     644     586       `
#include "main.h"

/**
 * _atoi - Convert a string to an integer
 * @s: input string
 *
 * Return: the converted integer
 */
int _atoi(char *s)
{
	unsigned int count = 0, size = 0, oi = 0, pn = 1, m = 1, i;

	while (*(s + count) != '\0')
	{
		if (size > 0 && (*(s + count) < '0' || *(s + count) > '9'))
			break;

		if (*(s + count) == '-')
			pn *= -1;

		if ((*(s + count) >= '0') && (*(s + count) <= '9'))
		{
			if (size > 0)
				m *= 10;
			size++;
		}
		count++;
	}

	for (i = count - size; i < count; i++)
	{
		oi = oi + ((*(s + i) - 48) * m);
		m /= 10;
	}
	return (oi * pn);
}
1-isdigit.c/    0           0     0     644     260       `
#include "main.h"

/**
 * _isdigit - checks if parameter is a number between 0 to 9
 * @c: input number
 *
 * Return: 1 if is a number (0 to 9), 0 in other case
 */
int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
1-memcpy.c/     0           0     0     644     325       `
/**
 * _memcpy - copies memory area
 * @dest: The destination to be copied to
 * @src: The source to be copied from
 * @n: the number of bytes to be copied
 *
 * Return: pointer
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}

	return (dest);
}

1-strncat.c/    0           0     0     644     428       `
/**
 * _strncat - concatenates two strings
 * @dest: destination
 * @src: source
 * @n: amount of bytes used from src
 *
 * Return: the pointer to dest
 */
char *_strncat(char *dest, char *src, int n)
{
	int count = 0, count2 = 0;

	while (*(dest + count) != '\0')
	{
		count++;
	}

	while (count2 < n)
	{
		*(dest + count) = *(src + count2);
		if (*(src + count2) == '\0')
			break;
		count++;
		count2++;
	}
	return (dest);
}
2-strchr.c/     0           0     0     644     403       `
#include <stdio.h>

/**
 * _strchr - locates a character in a string
 * @s: The string containing the characher
 * @c: The character to be searched for
 *
 * Return: pointer
 */
char *_strchr(char *s, char c)
{
	int i;
	char *found = NULL;

	for (i = 0; s[i] != '\0'; i++)
	{
		if (s[i] == c)
		{
			found = &s[i];
			break;
		}
	}

	if (found == NULL && c == '\0')
		found = &s[i];

	return (found);
}

2-strlen.c/     0           0     0     644     244       `
#include "main.h"

/**
 * _strlen - This function returns the length of a string
 * @s: The string to return the length
 *
 * Return: length of s
 */
int _strlen(char *s)
{
	long int len = 0;

	while (s[len] != '\0')
		len++;

	return (len);
}
2-strncpy.c/    0           0     0     644     427       `
/**
 * _strncpy -  copies a string
 * @src: the string to be copied from
 * @dest: the string to be copied
 * @n: Total number of bytes to copy from src to dest
 *
 * Return: A pointer to dest
 */
char *_strncpy(char *dest, char *src, int n)
{
	int i, j, len;

	i = 0;
	while (src[i] != '\0')
		i++;
	len = i;

	j = 0;
	while (j < n)
	{
		if (j < len)
			dest[j] = src[j];
		else
			dest[j] = '\0';
		j++;
	}
	return (dest);
}

3-islower.c/    0           0     0     644     329       `
#include "main.h"

/**
 *  _islower - Shows 1 if the input is a
 *  lowercase character. Another cases, shows
 *  0
 *
 *  @c: The character in ASCII code
 *
 *  Return: 1 for lowercase character. 0 for the rest
 */
int _islower(int c)
{
	if (c >= 97 && c <= 122)
	{
		return (1);
	}
	else
	{
		return (0);
	}
	_putchar('\n');
}

3-puts.c/       0           0     0     644     251       `
#include "main.h"

/**
 * _puts - prints a string, followed by a new line, to stdout
 * @str: The string to be printed to stdout
 *
 * Return: nothing
 */
void _puts(char *str)
{
	for (; *str != '\0'; str++)
	{
		_putchar(*str);
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     321       `
#include "main.h"

/**
 * _strcmp - compares two strings
 * @s1: the first string
 * @s2: the second string
 *
 * Return: int
 */
int _strcmp(char *s1, char *s2)
{
	int i = 0, op = 0;
	while (op == 0)
	{
		if ((*(s1 + i) == '\0') && (*(s2 + i) == '\0'))
			break;
		op = *(s1 + i) - *(s2 + i);
		i++;
	}

	return (op);
}

3-strspn.c/     0           0     0     644     463       `
/**
 * _strspn - gets the length of a prefix substring
 * @s: The string that contains the substring
 * @accept: the Substring in s
 *
 * Return: int
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int prev, count;
	int i, j;

	prev = 0;
	count = 0;

	for (i = 0; s[i] != '\0'; i++)
	{
		prev = count;
		for (j = 0; accept[j] != '\0'; j++)
		{
			if (s[i] == accept[j])
			{
				++count;
			}
		}
		if (prev == count)
			break;
	}

	return (count);
}

4-isalpha.c/    0           0     0     644     321       `
#include "main.h"

/**
 * _isalpha - Shows 1 if the input is a
 * letter Another cases, shows 0
 *
 * @c: The character in ASCII code
 *
 * Return: 1 for letters. 0 for the rest
 */
int _isalpha(int c)
{
	if ((c >= 97 && c <= 122) || (c >= 65 && c <= 90))
	{
		return (1);
	}
	else
	{
		return (0);
	}
	_putchar('\n');
}

4-strpbrk.c/    0           0     0     644     430       `
#include <stdio.h>

/**
 * _strpbrk - searches a string for any of a set of bytes
 * @s: The string
 * @accept: The set of bytes
 *
 * Return: pointer
 */
char *_strpbrk(char *s, char *accept)
{
	int i, j;
	char *found = NULL;

	for (i = 0; s[i] != '\0'; i++)
	{
		for (j = 0; accept[j] != '\0'; j++)
		{
			if (s[i] == accept[j])
			{
				found = &s[i];
				break;
			}
		}

		if (found != NULL)
			break;
	}

	return (found);
}
5-strstr.c/     0           0     0     644     565       `
#include <stdio.h>

/**
 * _strstr - locates a substring
 * @haystack: The string to be searched in
 * @needle: The string to be searched for
 *
 * Return: pointer
 */


char *_strstr(char *haystack, char *needle)
{
	int i, j, len;
	char *found = NULL;

	i = 0;
	while (needle[i] != '\0')
		i++;
	len = i;
	for (i = 0; haystack[i] != '\0'; i++)
	{
		for (j = 0; needle[j] != '\0' && haystack[i] == needle[j]; j++)
		{
			if (haystack[i] != needle[j])
				break;
			++i;
		}

		if (j == len)
		{
			found = (haystack + i - len);
			break;
		}
	}

	return (found);
}

6-abs.c/        0           0     0     644     229       `
#include "main.h"

/**
 * _abs - Computes the absolute value of an integer
 *
 * @i: input number as an integer
 *
 * Return: absolute value
 */
int _abs(int i)
{
	if (i >= 0)
	{
		return (i);
	}
	else
	{
		return (i * -1);
	}
}

9-strcpy.c/     0           0     0     644     397       `
#include "main.h"

/**
 * _strcpy - copies the string pointed to by src, including the
 * terminating null byte (\0), to the buffer pointed to by dest
 * @dest: The pointer to copy to
 * @src: The pointer to copy from
 *
 * Return:
 * dest pointer
 */
char *_strcpy(char *dest, char *src)
{
	int i = 0;

	while (src[i] != '\0')
	{
		dest[i] = src[i];
		i++;
	}
	dest[i] = '\0';

	return (dest);
}

_putchar.c/     0           0     0     644     171       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

